{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"WCfromScratch/","title":"Create a Vite Web Component from Scratch","text":""},{"location":"WCfromScratch/#creating-a-vite-web-component-from-scratch","title":"Creating a Vite Web Component from Scratch","text":"<p>In the labs you started out with a prebuilt scaffold for developing your Web Components using Vite + Lit.  In this section you will learn the steps to create that same setup from scratch.</p> <p>Prerequisites</p> <ul> <li>Node JS</li> <li>Yarn</li> <li>VS Code </li> <li>Recommended VS Code Extensions:  <ul> <li>runem.lit-plugin</li> <li>lit.lit-snippets</li> <li>bierner.lit-html </li> </ul> </li> </ul>"},{"location":"WCfromScratch/#scaffold-vite","title":"Scaffold Vite","text":"<p>In a folder where you are comfortable developing (you can create a new folder), open a terminal Enter the command: yarn create vite Enter a hyphenated name for your project like my-demo Select Lit Select TypeScript cd into your new directory  </p>"},{"location":"WCfromScratch/#add-additional-packages","title":"Add additional packages","text":"<p>In the terminal of your new directory </p> If you are going to use the Webex Contact Center SDKIf you are NOT using the Webex SDK, but may use some additional node packages <p>Enter the command: yarn add vite-plugin-node-polyfills @webex/contact-center@next --dev @types/minimatch concurrently </p> <p>Enter the command: yarn add vite-plugin-node-polyfills --dev @types/minimatch concurrently </p> <p>Start VS Code in the current directory using the command code . Create a new file named: vite.config.ts </p> <p>Add this code into your new vite.config.ts file</p> <pre><code>import { defineConfig } from \"vite\";\nimport { nodePolyfills } from 'vite-plugin-node-polyfills'\n\nexport default defineConfig({\n    build:{\n        rollupOptions:{\n            output:{\n                entryFileNames:\"[name].js\",\n                chunkFileNames:\"[name].js\",\n                assetFileNames:\"[name].[ext]\"\n            }\n        }\n    },\n    plugins: [\n    nodePolyfills({\n    // Whether to polyfill `node:` protocol imports.\n    protocolImports: true,\n    }),\n]\n})\n</code></pre> <p>Save the file  </p>"},{"location":"WCfromScratch/#add-script-to-packagejson-so-that-you-can-test-inside-the-agent-desktop-after-initial-development","title":"Add Script to package.json so that you can test inside the Agent Desktop after initial development","text":"<p>Open the package.json In the scripts section, after preview, add a comma and this <code>\"game\": \"concurrently \\\"vite build --watch\\\" \\\"vite preview\\\"\"</code> </p>"},{"location":"WCfromScratch/#enjoy-your-coding","title":"Enjoy your coding!","text":""},{"location":"WXCC_SDK/","title":"SDK","text":""},{"location":"WXCC_SDK/#banking-crm-with-webex-cc-sdk","title":"Banking CRM with Webex CC SDK","text":"A Quick Poll"},{"location":"WXCC_SDK/#story","title":"Story","text":"<p>As a contact center developer, I want to integrate Webex Contact Center SDK capabilities into a banking CRM application, so that agents can handle calls directly within their familiar business interface without switching between multiple applications.</p> <p>Requirements</p> <ol> <li>SDK Integration:<ul> <li>Initialize Webex Contact Center SDK with OAuth token</li> <li>Register agent profile and retrieve available teams and login options</li> <li>Handle agent login/logout operations</li> </ul> </li> <li>Call Handling: <ul> <li>Receive incoming call events and display call details</li> <li>Provide call control functions (hold, resume, end)</li> <li>Handle wrap-up codes and call completion</li> </ul> </li> <li>CRM Integration:<ul> <li>Automatically search customer records when calls arrive</li> <li>Display caller information and call associated details  </li> <li>Click to dial integration</li> </ul> </li> <li>Real-time Updates:<ul> <li>Listen for agent state changes and task events</li> <li>Update UI dynamically based on call status</li> <li>Provide visual feedback for all operations</li> </ul> </li> </ol>"},{"location":"WXCC_SDK/#start-here","title":"Start here","text":"<p>Critical First Step</p> <p>Ensure you have logged out of your existing agent desktop session.</p>"},{"location":"WXCC_SDK/#clone-the-repository-with-git","title":"Clone the repository with git","text":"<p>Open Visual Studio Code</p> <p>Click the Source Control button in the left menu </p> <p>Click Clone Repository</p> <p>Enter the repository source: https://github.com/shrishailsd/WX12025</p> <p>Select or create a new folder to clone the repository into.</p> <p>When prompted to open the cloned repository, select open. </p>"},{"location":"WXCC_SDK/#review-the-project-structure-and-key-files","title":"Review the project structure and key files","text":"<p>Once the project is opened in the VS code and examine the three critical files:</p> <p>banking-crm.html - Contains the HTML structure for the CRM application crm-app.js - Handles CRM functionality and customer data management wx1-sdk.ts - Implements Webex Contact Center SDK integration  </p> <p>Navigate to line 198 in <code>banking-crm.html</code> to see how the LitElement web component is integrated within the CRM html template Notice line 206</p> LitElement Integration Example <pre><code>&lt;wx1-sdk&gt;&lt;/wx1-sdk&gt;\n</code></pre>"},{"location":"WXCC_SDK/#examine-the-sdk-implementation-architecture","title":"Examine the SDK implementation architecture","text":"<p>Open <code>wx1-sdk.ts</code> and review the class structure and key methods:</p> <p>@customElement(\"wx1-sdk\") - Defines the custom web component that you saw in previous step  startConnection() - Initializes Webex SDK connection and obtains the webex object getOptions() - Sets up agent information from profile object and registers event listeners for call handling actionTask() - Handles call control operations like hold, resume, mute, unmute etc. </p> For example: Following are some of the SDK methods that are being used <ul> <li><code>this.webex.cc.register()</code> - Register to webex contact center to obtain agent profile details.</li> <li><code>this.webex.cc.on(\"AgentStateChangeSuccess\", (event: any)</code> - Listen for events from webex contact center</li> <li><code>task.hold()</code>, <code>task.resume()</code>, <code>task.end()</code> - Call controls for hold, resume and end.</li> <li><code>this.task.wrapup({                 wrapUpReason:</code>${aux2}<code>,                 auxCodeId:</code>${aux1}<code>})</code> - Complete call with wrap-up reason</li> </ul>"},{"location":"WXCC_SDK/#configure-crm-for-testing","title":"Configure CRM for testing","text":"<p>Before testing SDK with CRM, you need to configure the CRM with your phone number for automatic customer lookup and click to dial. Open <code>crm-app.js</code> and edit the customer record from line 40 with your details:</p> Update Customer Record <pre><code>'1': {\n    id: '1',\n    firstName: 'john',         // Your FirstName\n    lastName: 'smith',         // Your lastName\n    phone: '(555) 987-6544',  // Replace with your ANI\n    email: 'john.smith@email.com',\n    address: '123 Main St, Anytown, ST 12345',\n    dob: '1985-06-15',\n    memberSince: '2020-03-10',\n    notes: 'Preferred customer, has premium account package.'\n}\n</code></pre> <p>Replace the firstName, lastName with your first and lastname Replace phone with Webex Phone Number: Provided by proctor</p>"},{"location":"WXCC_SDK/#launch-the-crm-application","title":"Launch the CRM application","text":"<p>From the terminal in VS code type 'npm install' and hit enter, This will download node dependencies From the terminal in VS code type 'npm run build', and hit enter, This will build your application. ensure there are no errors  </p> <p>Build Error Recovery</p> <p>If you encounter an error during build, then delete the <code>dist</code> folder, re-attempt <code>npm run build</code>. </p> <p>From the terminal type 'npm run dev', and hit enter, This will spin up your application automatically in the browser on http://localhost:1234</p> <p>Troubleshooting Login Issues</p> <p>At any point during this lab, if you encounter issues with logging in to custom desktop:</p> <ol> <li>Login to https://developer.webex.com/webex-contact-center/docs/api/v1/agents/logout using your credentials</li> <li>On the right side, Provide a logout reason as <code>API_Logout</code> and click on run,Ensure that you see a 202 response </li> <li>From your VS Code, locate and delete the <code>dist</code> folder</li> </ol> <p>Critical Step</p> <p>Hard refresh your application using Ctrl + Shift + R and try to relogin</p>"},{"location":"WXCC_SDK/#sdk-authentication-and-initialization","title":"SDK Authentication and Initialization","text":""},{"location":"WXCC_SDK/#obtain-and-configure-your-access-token","title":"Obtain and configure your access token","text":"<p>Use the token below.</p> <p>Token: </p> <p>In the CRM application interface, locate the access token input field Paste the token you copied.</p>"},{"location":"WXCC_SDK/#initialize-sdk-connection-and-retrieve-agent-profile","title":"Initialize SDK connection and retrieve agent profile","text":"<p>Click the \"Login\" button to initialize the SDK connection The system will automatically:</p> <ul> <li>Validate your access token  </li> <li>Creates webex object and pulls your desktop profile </li> <li>Load available teams and telephony login options </li> </ul> What information is retrieved during agent registration? <p>The profile object contains multiple config entities but here the important ones we will be using for this lab:</p> <ul> <li>Agent name and ID</li> <li>Available teams</li> <li>Voice login options (BROWSER, AGENT_DN, etc.)</li> <li>Idle codes and wrap-up codes</li> <li>Dial number assignments</li> </ul>"},{"location":"WXCC_SDK/#agent-login-process","title":"Agent login process","text":"<p>From the loaded profile information:</p> <p>Choose BROWSER as the login option Select your assigned team from the teams dropdown Click \"Station Login\" to establish your agent session , by default you will be in idle state.</p>"},{"location":"WXCC_SDK/#call-handling-implementation","title":"Call Handling Implementation","text":""},{"location":"WXCC_SDK/#understanding-the-event-driven-architecture","title":"Understanding the event-driven architecture","text":"<p>The SDK uses an event-driven pattern for real-time updates from webex contact center.</p> Key Event Listeners <pre><code>this.webex.cc.on(\"task:incoming\", (task: ITask) =&gt; {\n\n        Logger.webex('TASK-INCOMING', 'New incoming task received', { \n            taskUuid: (task as any).uuid, \n            ani: (task.data as any)?.interaction?.callAssociatedDetails?.ani \n        });\n        this.task = task\n        this.cad = Object.entries(this.task.data.interaction.callAssociatedDetails).map(([key, value]) =&gt; { return html`&lt;p&gt;${key}: ${value}&lt;/p&gt;` })\n\n        this.ani = this.task.data.interaction.callAssociatedDetails.ani\n        Logger.debug('ANI-EXTRACT', 'Extracted ANI from task', { ani: this.ani });\n\n        // Play incoming call audio notification\n        this.playIncomingCallAudio();\n\n        // Check if this is an outbound call we initiated - skip CRM search for outbound calls\n        Logger.debug('OUTBOUND-FLAG', 'Checking isOutboundCall flag in task:incoming', { isOutboundCall: this.isOutboundCall });\n\n        if (!this.isOutboundCall) {\n            // Only search CRM for inbound calls\n            Logger.info('CRM-SEARCH', 'Inbound call detected - performing CRM search');\n            this.callCrmSearch(this.ani);\n        } else {\n            Logger.info('CRM-SEARCH', 'Outbound call detected - skipping CRM search');\n        }\n\n        // Check if browser login is selected to show answer/decline buttons\n        const isBrowserLogin = this.agentLogin.loginOption === 'BROWSER';\n        Logger.debug('LOGIN-OPTION', 'Checking login option for task controls', { \n            loginOption: this.agentLogin.loginOption, \n            isBrowserLogin: isBrowserLogin \n        });\n\n        if (isBrowserLogin) {\n            // Show answer/decline buttons for browser login\n            this.tControls = html`\n                &lt;button @click=${this.actionTask.bind(this, 'answer')}&gt;Answer&lt;/button&gt;\n                &lt;button @click=${this.actionTask.bind(this, 'decline')}&gt;Decline&lt;/button&gt;\n            `\n            Logger.info('TASK-CONTROLS', 'Browser login detected - showing answer/decline buttons');\n        } else {\n            // For non-browser login (phone/desk phone), show incoming call message only\n            this.tControls = html`&lt;p&gt;\ud83d\udcde Incoming call from ${this.ani} - Please answer on your phone&lt;/p&gt;`\n            Logger.info('TASK-CONTROLS', 'Non-browser login detected - showing incoming call message');\n        }\n        this.task.once(\"task:end\", (task: ITask) =&gt; {\n            Logger.webex('TASK-END', 'Task ended', { taskUuid: (task as any).uuid });\n            // Stop incoming call audio when task ends\n            this.stopIncomingCallAudio();\n\n            // alert(`end ${JSON.stringify(task)}`)\n            this.tControls = html`&lt;select @change=${(e: any) =&gt; this.handleWrapupSelection(e)}&gt;\n                &lt;option value=\"\"&gt;Select wrap-up reason...&lt;/option&gt;\n                ${this.task.wrapupData.wrapUpProps.wrapUpReasonList.map((i:any)=&gt;{return html`&lt;option value=${i.id} data-name=${i.name}&gt;${i.name}&lt;/option&gt;`})}\n            &lt;/select&gt;`\n        })\n    })\n</code></pre>"},{"location":"WXCC_SDK/#test-incoming-call-handling-with-browser-login","title":"Test incoming call handling with browser login","text":"<p>Browser Login Test Steps:</p> <ol> <li>Change agent state to available  </li> <li>Place an inbound call: Provided by proctor </li> <li>Notice that the lookup of your number in CRM succeeds and you will see a popup with your details. Close it.</li> <li>Click \"Answer\" button in the SDK interface  </li> <li>Verify mute/unmute buttons appear in call controls  </li> <li>Test audio functionality - speak and listen through your computer  </li> <li>Test hold/resume and mute/unmute functions  </li> <li>End the call from your phone where you called from and complete wrap-up  </li> </ol> How does the CRM integration work with incoming calls? <pre><code>this.webex.cc.on(\"task:incoming\", (task) =&gt; {\n    this.ani = task.data.interaction.callAssociatedDetails.ani;\n    // Automatically trigger CRM customer search\n    this.callCrmSearch(this.ani);\n});\n</code></pre> What happens when you end a call? <p>The system automatically presents a wrap-up code selection interface, requiring the agent to categorize the call before becoming available for new calls.</p> <p>When a call ends, the wrap-up selection interface appears:</p> Wrap-up Implementation <pre><code>handleWrapupSelection(e: any) {\n    const selectedValue = e.target.value;\n    const selectedOption = e.target.selectedOptions[0];\n\n    if (selectedValue &amp;&amp; selectedOption) {\n        const wrapupName = selectedOption.dataset.name;\n        this.actionTask(\"wrapup\", selectedValue, wrapupName);\n    }\n}\n\n// SDK wrapup method\n\nthis.task.wrapup({wrapUpReason:`${aux2}`,\n                  auxCodeId: `${aux1}`\n                })\n</code></pre> <p>The call will be completed and you'll return to available status  </p> <p>The SDK automatically tracks and responds to agent state changes:</p> <ul> <li>Login/logout events  </li> <li>Available/Idle events.</li> </ul> How can you extend this to add custom state monitoring? <p>Add additional event listeners for specific state changes: </p><pre><code>        this.webex.cc.on(\"AgentStateChangeSuccess\", (event: any) =&gt; {\n        Logger.debug('AGENT-STATE', 'AgentStateChangeSuccess event', event);\n        this.idleCode.value = event.auxCodeId\n    });\n</code></pre><p></p>"},{"location":"WXCC_SDK/#test-click-to-dial-functionality","title":"Test click to dial functionality","text":"<p>Now test the outbound calling capability integrated into the CRM interface:</p> <ol> <li>Ensure agent is logged in </li> <li>Navigate to the CRM customer list in the banking application  </li> <li>Look for clickable phone numbers (they should appear as blue, underlined links)  </li> <li>Click on  phone number that you added earlier to initiate an outbound call  </li> <li>Verify call controls appear, Click on answer button.</li> <li>Note that CRM search is skipped for outbound calls.</li> <li>System will dial to your number, Answer it.</li> <li>Disconnect the call from phone.</li> </ol> Click-to-Dial Implementation <p>The CRM application automatically makes phone numbers clickable: </p><pre><code>    async placeClicktoDialcall(phone: string)\n\n    //Following is the SDK method used for outdial call.\n    await this.webex.cc.startOutdial(cleanedPhone);\n</code></pre> <p></p>"},{"location":"WXCC_SDK/#agent_dn-login-testing-and-comparison-optional","title":"AGENT_DN login testing and comparison (Optional)","text":"<p>Now test the agent device number (physical phone) call handling functionality:</p> <ol> <li>Logout from your current agent session  </li> <li>Refresh the browser using Ctrl + Shift + R </li> <li>Login again using the 'AGENT_DN' option instead of BROWSER  </li> <li>Input your mobile number with +1 prefix  </li> <li>**Repeat the inbound and outdial call that you tested in previous step. </li> </ol> Compare the Two Login Methods <p>AGENT_DN (Physical Phone):</p> <ul> <li>Calls are answered on a physical desk phone/mobile</li> <li>Limited browser-based call controls</li> <li>Traditional telephony experience</li> </ul> <p>BROWSER (Software):</p> <ul> <li>Calls are answered directly in the web browser</li> <li>Full WebRTC functionality with mute/unmute</li> <li>Complete software-based call handling</li> <li>Enhanced integration with CRM interface</li> </ul>"},{"location":"WXCC_SDK/#advanced-testing-with-browser-console","title":"Advanced testing with browser console","text":"<p>On your current session -</p> <p>Open browser Developer Tools (F12) Navigate to the Console tab Place an inbound call   Observe the SDK event logs, Filter console logs with [WX1-SDK] to see SDK related logs and [BANKING-CRM] to see CRM related logging Review the source code implementation during testing based on logs you see on the console.</p> <p>Advanced Click-to-Dial Testing: </p> <ol> <li>Verify error handling - try clicking while already on a call    </li> <li>Check console logs for detailed outbound call tracking </li> </ol> What validation occurs before placing an outbound call? <p>The <code>placeClicktoDialcall()</code> method performs several validations: - Agent login status verification - Phone number format validation and cleaning - Existing call conflict detection - SDK initialization check  </p> <p>Browser vs Phone Login Differences for Outbound:</p> <ul> <li>BROWSER login: Full WebRTC outbound calling through browser  </li> <li>AGENT_DN login: Outbound calls bridge through assigned desk phone  </li> <li>Both modes: Support click-to-dial from CRM interface  </li> </ul>"},{"location":"conclusion/","title":"Related Sessions at Cisco Live","text":""},{"location":"conclusion/#related-sessions-at-cisco-live","title":"Related Sessions at Cisco Live","text":"<ul> <li>BRKXXX-1111 My friend's breakout session</li> </ul>"},{"location":"documentationLinks/","title":"Documentation Links","text":""},{"location":"documentationLinks/#links-to-documentation","title":"Links to Documentation","text":"<p>Vite Lit Element Webex Contact Center SDK Introduction Webex Contact Center SDK Sample App Webex Contact Center SDK References Git Cheat Sheet </p>"},{"location":"hostingYourCode/","title":"Hosting Your Code","text":""},{"location":"hostingYourCode/#create-an-new-repository-in-your-personal-github-account","title":"Create an New Repository In Your Personal GitHub Account","text":"<p>Log into your GitHub Account </p> In the upper right corner , click on the <code>+</code> menu then select New Repository <p></p> <p>Fill in the details:  </p> <p>Repository Name: Wx1-Web-Components Choose visibility: Public Add README: False Add .gitignore: No .gitignore Add license: No License  </p> <p>Click Create repository  Leave this tab open for use in future steps  </p> Enter your GitHub Account Information GitHub Account: GitHub Email Address: Update Lab Guide"},{"location":"hostingYourCode/#update-the-gitignore-file","title":"Update the .gitignore file","text":"<p>Open the .gitignore file in your project Comment out <code>dist</code> (line 11) by placing your cursor on the line and using the keyboard shortcut using ctrl + / Save the file (ctrl + s)  </p>"},{"location":"hostingYourCode/#update-git-settings-on-the-lab-pc","title":"Update Git settings on the lab PC","text":"<p>In the terminal of VS Code enter the following commands one at a time: git config user.email \"\"\" git config user.name \"\"\"</p>"},{"location":"hostingYourCode/#remove-the-current-remote-upstream-repository-and-replace-with-your-new-repository","title":"Remove the Current Remote Upstream Repository and Replace With Your New Repository","text":"<p>In the terminal of VS Code enter the following commands one at a time: git remote remove origin git remote add origin https://github.com/{githubAccount}/Wx1-Web-Components.git </p>"},{"location":"hostingYourCode/#push-your-code","title":"Push Your Code","text":"<p>In the terminal of VS Code enter the following commands one at a time: git add . git commit -m \"My First Commit\" git push -u origin main </p>"},{"location":"hostingYourCode/#option-1-using-github-pages","title":"Option 1: Using Github Pages","text":"<p>In your github repository Click Settings on the top ribbon Select Pages on the left side menu Under Branch, Select main Leave /(root) selected Click Save  </p> Show Me <p></p> <p>Click Code in the top ribbon  </p> It will take a few minutes to publish the new site, refresh the page until you see the Deployments section populated like this <p></p>"},{"location":"hostingYourCode/#update-you-desktop-layout-json-to-use-the-hosted-version-of-your-web-components","title":"Update You Desktop Layout JSON to Use the Hosted Version of your Web Components","text":"<p>Open your Desktop Layout JSON on VS Code Use the ctrl + f keyboard shortcut to find http://localhost:4173/index.js  Replace all instances with https://yourGHAccount.github.io/Wx1-Web-Components/dist/index.js Save and Upload your Desktop JSON Layout Login as an agent and test.  </p>"},{"location":"hostingYourCode/#add-your-json-file-to-your-new-repository","title":"Add your JSON file to your new repository","text":"<p>Copy your JSON file into the root directory in VS Code Click the Source Control menu on the left menu bar Click the <code>+</code> sign next to the change Add a commit message Click the drop down menu which is part of the Commit button Select Commit &amp; Sync  </p> Show me <p> </p>"},{"location":"hostingYourCode/#option-2-using-jsdelivr-demo-only","title":"Option 2: Using JSDelivr (Demo Only)","text":"<p>Note</p> <ul> <li>You do not need to enable GitHub Pages to use this method, but you will need to expose your dist folder.  </li> <li>This method will cache this specific version of your code and removing the cached version of your code will require additional steps requiring support from JSDelivr. Documentation</li> </ul> Locate the specific Commit ID you will be using <p></p> <p>Create a formatted URL and test using a browser  </p> <p>URL should be formatted like this <code>https://cdn.jsdelivr.net/gh/&lt;GH userName&gt;/&lt;repository name&gt;@&lt;Commit ID&gt;/dist/index.js</code> with the variables replaced  </p> <p>You can use this URL as your script URL in a desktop layout.  </p>"},{"location":"hostingYourCode/#remove-your-credentials-from-the-lab-pc","title":"Remove your Credentials from the lab PC","text":"<p>Note</p> <p>As this is a shared lab PC, we will remove your Github credentials from the Windows Credential Manager.  If you are completing this step on your own personal PC, you do not need to complete this step.</p> <p>Press the Windows key and type Credential Manager, and press Enter. Click on \"Windows Credentials\". Under \"Generic Credentials\", look for entries that start with git: or github.com (e.g., git:https://github.com). Expand each relevant entry and click \"Remove\" or \"Delete\". Confirm the deletion.  </p>"},{"location":"hostingYourCode/#delete-the-folder-containing-the-code-you-created-in-this-lab","title":"Delete the folder containing the code you created in this lab.","text":""},{"location":"lab1_exploring_wc/","title":"Lab 1 - Exploring Web Components","text":""},{"location":"lab1_exploring_wc/#exploring-web-components","title":"Exploring Web Components","text":"<p>In this lab you will be exploring how web components function and update in a simplified and isolated exercise.</p>"},{"location":"lab1_exploring_wc/#clone-the-repository-with-git","title":"Clone the repository with git","text":"<p>Open Visual Studio Code</p> <p>Click the Source Control button in the left menu </p> <p>Click Clone Repository</p> <p>Enter the repository source: https://github.com/kevsimps/wx1-starter.git</p> <p>Select or create a new folder to clone the repository into.</p> <p>When prompted to open the cloned repository, select open. </p>"},{"location":"lab1_exploring_wc/#install-the-recommended-extensions","title":"Install the recommended extensions","text":"<p>When you see the prompt to install recommended extensions in the lower right corner of VS Code, click install.  </p>"},{"location":"lab1_exploring_wc/#build-the-environment","title":"Build the environment","text":"<p>Drag open the terminal at the bottom of the Visual Studio Code window</p> Show Me <p></p> <p>In your terminal enter the following command:</p> <p>yarn </p>"},{"location":"lab1_exploring_wc/#your-first-web-component","title":"Your First Web Component","text":""},{"location":"lab1_exploring_wc/#create-and-scaffold-a-new-file","title":"Create and scaffold a new file","text":"<p>Create a new file in the src directory named hello-world.ts</p> Show Me <p></p> <p>In the new file type (not paste) littemplate</p> <p>Select the Create LitElement Component With lit-html</p> You should have a scaffold to build your new component <p></p>"},{"location":"lab1_exploring_wc/#add-a-new-property-and-state","title":"Add a new property and state","text":"<p>Insert a line above Static Styles (line 6)</p> <p>Add a new string property above the static styles: @property() myprop: string = \"My Property\"</p> <p>Add a new string state the line below the property you just added: @state() mystate: string = \"My State\"</p>"},{"location":"lab1_exploring_wc/#add-some-html-elements-to-the-html-template-in-the-render-method","title":"Add some HTML elements to the html template in the render method","text":"<p>In the render() method add a few lines between the back ticks in of the <code>return html``</code> line</p> <p>On the line below <code>return html`</code>, add a div tag by typing: <code>&lt;div&gt;</code></p> <p>Hit the enter button and add an h1 tag which will contain the value of the myprop property: <code>&lt;h1&gt;${this.myprop}&lt;/h1&gt;</code></p> <p>Below the h1 tag you just created, add the following code which includes:</p> <p>An h2 tag with the value of mystate</p> <p>An input box with the value of myprop which will update the value of the property when the input box is changed  </p> <p>An input box with the value of mystate which will update the value of the state when the input box is changed  </p> <pre><code>    &lt;h2&gt;${this.mystate}&lt;/h2&gt;\n    &lt;input value=${this.myprop} @change=${(e: any) =&gt; this.myprop = e.target.value}&gt; \n    &lt;input value=${this.mystate} @change=${(e: any) =&gt; this.mystate = e.target.value}&gt; \n</code></pre>"},{"location":"lab1_exploring_wc/#add-some-css-to-the-static-styles","title":"Add some CSS to the static styles","text":"<p>In the css template add these styles below the :host entry closing curly brace:</p> <pre><code>            div{\n                border:solid black 2px;\n            }\n            h1{\n                color:blue;\n            }\n            h2{\n                color:red;\n            }\n</code></pre>"},{"location":"lab1_exploring_wc/#add-your-new-component-to-the-testing-page","title":"Add your new component to the testing page","text":"<p>Click on the index.html file in the explorer tab:</p> <p>In the head section of the html:</p> <p>Add a script tag under the existing script tag (if you type it, intellisense will help with the autocomplete options)</p> <pre><code>&lt;script type=\"module\" src=\"/src/hello-world.ts\"&gt;&lt;/script&gt;\n</code></pre> <p>In the body section add your new custom element tag above the existing my-element custom element tag:</p> <pre><code>&lt;hello-world&gt;&lt;/hello-world&gt;\n</code></pre> <p>Save the file (ctrl + s or File &gt; Save)</p>"},{"location":"lab1_exploring_wc/#start-the-development-server-and-test","title":"Start the development server and test","text":"<p>In the terminal run the command: yarn dev</p> <p>Open a browser tab to http://localhost:5173/</p>"},{"location":"lab1_exploring_wc/#update-values-using-the-input-boxes","title":"Update values using the input boxes","text":"<p>In the input box which has the value of My Property, change the value to: Prop From Component</p> <p>In the input box which has the value of My State, change the value to: State From Component</p> What happens when you change the values in the input boxes? <p>When you click out of the input box or press enter, the UI updates with the new value.</p>"},{"location":"lab1_exploring_wc/#add-property-and-state-declarations-in-indexhtml","title":"Add property and state declarations in index.html","text":"<p>Inside the opening tag of hello-world add:  myprop=\"set in html\" mystate=\"set in html\"</p> <p>Save the file (ctrl + s or File &gt; Save)</p> What happens in your component? <p>The value of the property gets it's value from the parent Dom. The value of the state does not update.</p> Why didn't the state update? <p>state is a private internal variable</p>"},{"location":"lab1_exploring_wc/#add-a-new-method-to-change-the-values-of-myprop-and-mystate","title":"Add a new method to change the values of myprop and mystate","text":"<p>Above the render method create a new method called change values</p> <p>changeValues(){}</p> Inside the curly braces, set the value of myprop and mystate to set by method <pre><code>    changeValues(){\n    this.myprop = \"set by method\"\n    this.mystate = \"set by method\"\n    }\n</code></pre>"},{"location":"lab1_exploring_wc/#add-a-button-to-call-the-new-method-when-clicked","title":"Add a button to call the new method when clicked","text":"<p>Inside the html template below the input tags and still inside the div tags add this line:</p> <p><code>&lt;button @click=${this.changeValues}&gt;Call Method&lt;/button&gt;</code></p> <p>Save the file</p> <p>Click the new Call Method button to test the functionality</p>"},{"location":"lab1_exploring_wc/#edit-the-changevalues-method-and-call-method-button-to-pass-a-value-and-update-the-value-of-myprop","title":"Edit the changeValues method and Call Method button to pass a value and update the value of myprop","text":"<p>Inside the parentheses of the changeValues method add a string variable named newValue: newValue:string</p> <p>Change the value you are setting this.myprop to: newValue </p> <p>In the render method, change the @click listener to: ${this.changeValues.bind(this,\"set by button\")}</p> This is how your code should look <p>-</p> <p>Save the file</p> <p>Click the Call Method button</p> What happened when you pressed the Call Method Button? <p>The value for myprop changed to \"set by button\" The value for mystate changes to \"set by method\"</p> Why? <p>The value of \"set by button\" was passed to the changeValues method as a parameter when the button was clicked and you only changed the value of myprop to use the passed value while mystate was set to the value defined in the method.</p>"},{"location":"lab1_yourFirstWc/","title":"Your First Web Component","text":""},{"location":"lab1_yourFirstWc/#your-first-web-component","title":"Your First Web Component","text":""},{"location":"lab1_yourFirstWc/#create-and-scaffold-a-new-file","title":"Create and scaffold a new file","text":"<p>Create a new file in the src directory named hello-world.ts</p> Show Me <p></p> <p>In the new file type (not paste) littemplate</p> <p>Select the Create LitElement Component With lit-html</p> You should have a scaffold to build your new component <p></p>"},{"location":"lab1_yourFirstWc/#add-a-new-property-and-state","title":"Add a new property and state","text":"<p>Insert a line above Static Styles (line 6)</p> <p>Add a new string property above the static styles: @property() myprop: string = \"My Property\"</p> <p>Add a new string state the line below the property you just added: @state() mystate: string = \"My State\"</p>"},{"location":"lab1_yourFirstWc/#add-some-html-elements-to-the-html-template-in-the-render-method","title":"Add some HTML elements to the html template in the render method","text":"<p>In the render() method add a few lines between the back ticks in of the <code>return html``</code> line</p> <p>On the line below <code>return html`</code>, add a div tag by typing: <code>&lt;div&gt;</code></p> <p>Hit the enter button and add an h1 tag which will contain the value of the myprop property: <code>&lt;h1&gt;${this.myprop}&lt;/h1&gt;</code></p> <p>Below the h1 tag you just created, add the following code which includes:</p> <p>An h2 tag with the value of mystate</p> <p>An input box with the value of myprop which will update the value of the property when the input box is changed  </p> <p>An input box with the value of mystate which will update the value of the state when the input box is changed  </p> <pre><code>    &lt;h2&gt;${this.mystate}&lt;/h2&gt;\n    &lt;input value=${this.myprop} @change=${(e: any) =&gt; this.myprop = e.target.value}&gt; \n    &lt;input value=${this.mystate} @change=${(e: any) =&gt; this.mystate = e.target.value}&gt; \n</code></pre>"},{"location":"lab1_yourFirstWc/#add-some-css-to-the-static-styles","title":"Add some CSS to the static styles","text":"<p>In the css template add these styles below the :host entry closing curly brace:</p> <pre><code>            div{\n                border:solid black 2px;\n            }\n            h1{\n                color:blue;\n            }\n            h2{\n                color:red;\n            }\n</code></pre>"},{"location":"lab1_yourFirstWc/#add-your-new-component-to-the-testing-page","title":"Add your new component to the testing page","text":"<p>Click on the index.html file in the explorer tab:</p> <p>In the head section of the html:</p> <p>Add a script tag under the existing script tag (if you type it, intellisense will help with the autocomplete options)</p> <pre><code>&lt;script type=\"module\" src=\"/src/hello-world.ts\"&gt;&lt;/script&gt;\n</code></pre> <p>In the body section add your new custom element tag above the existing my-element custom element tag:</p> <pre><code>&lt;hello-world&gt;&lt;/hello-world&gt;\n</code></pre> <p>Save the file (ctrl + s or File &gt; Save)</p>"},{"location":"lab1_yourFirstWc/#start-the-development-server-and-test","title":"Start the development server and test","text":"<p>In the terminal run the command: yarn dev</p> <p>Open a browser tab to http://localhost:5173/</p>"},{"location":"lab1_yourFirstWc/#update-values-using-the-input-boxes","title":"Update values using the input boxes","text":"<p>In the input box which has the value of My Property, change the value to: Prop From Component</p> <p>In the input box which has the value of My State, change the value to: State From Component</p> What happens when you change the values in the input boxes? <p>When you click out of the input box or press enter, the UI updates with the new value.</p>"},{"location":"lab1_yourFirstWc/#add-property-and-state-declarations-in-indexhtml","title":"Add property and state declarations in index.html","text":"<p>Inside the opening tag of hello-world add:  myprop=\"set in html\" mystate=\"set in html\"</p> <p>Save the file (ctrl + s or File &gt; Save)</p> What happens in your component? <p>The value of the property gets it's value from the parent Dom. The value of the state does not update.</p> Why didn't the state update? <p>state is a private internal variable</p>"},{"location":"lab1_yourFirstWc/#add-a-new-method-to-change-the-values-of-myprop-and-mystate","title":"Add a new method to change the values of myprop and mystate","text":"<p>Above the render method create a new method called change values</p> <p>changeValues(){}</p> Inside the curly braces, set the value of myprop and mystate to set by method <pre><code>    changeValues(){\n    this.myprop = \"set by method\"\n    this.mystate = \"set by method\"\n    }\n</code></pre>"},{"location":"lab1_yourFirstWc/#add-a-button-to-call-the-new-method-when-clicked","title":"Add a button to call the new method when clicked","text":"<p>Inside the html template below the input tags and still inside the div tags add this line:</p> <p><code>&lt;button @click=${this.changeValues}&gt;Call Method&lt;/button&gt;</code></p> <p>Save the file</p> <p>Click the new Call Method button to test the functionality</p>"},{"location":"lab1_yourFirstWc/#edit-the-changevalues-method-and-call-method-button-to-pass-a-value-and-update-the-value-of-myprop","title":"Edit the changeValues method and Call Method button to pass a value and update the value of myprop","text":"<p>Inside the parentheses of the changeValues method add a string variable named newValue: newValue:string</p> <p>Change the value you are setting this.myprop to: newValue </p> <p>In the render method, change the @click listener to: ${this.changeValues.bind(this,\"set by button\")}</p> This is how your code should look <p>-</p> <p>Save the file</p> <p>Click the Call Method button</p> What happened when you pressed the Call Method Button? <p>The value for myprop changed to \"set by button\" The value for mystate changes to \"set by method\"</p> Why? <p>The value of \"set by button\" was passed to the changeValues method as a parameter when the button was clicked and you only changed the value of myprop to use the passed value while mystate was set to the value defined in the method.</p>"},{"location":"lab2_adminActions/","title":"Lab 2 - Admin Actions","text":""},{"location":"lab2_adminActions/#story","title":"Story","text":"<p>As a contact center administrator, I need to log out agents which have not logged out after their shift, so that the contact center reporting statistics are accurate. </p> <p>Requirements</p> <ol> <li>Need a list of logged in agents which includes:<ul> <li>Agent name</li> <li>Team name</li> <li>Login time</li> <li>Current Status</li> <li>Last Activity time</li> </ul> </li> <li>Need to be able to log out an agent</li> </ol>"},{"location":"lab2_adminActions/#data-and-actions","title":"Data and Actions","text":""},{"location":"lab2_adminActions/#log-into-the-agent-desktop-so-that-you-have-data-to-query-against","title":"Log into the Agent Desktop (so that you have data to query against)","text":"<p>Launch the Agent Desktop</p> <p>Login: admin login Password: password Team: team </p>"},{"location":"lab2_adminActions/#use-the-search-api-graphql-workbench-to-create-the-query-for-the-search-api","title":"Use the Search API GraphQL Workbench to create the query for the Search API","text":"<p>Open the Search API GraphQL Workbench</p> <p>Use the Authorization Tool (Tools &gt; Authorization)</p> <p>Login: admin login Password: password</p> Copy the authorization header into the environment variables <p></p> <p>Set the URL: https://api.wxcc-us1.cisco.com/search</p> <p>Open the Docs Panel  Click Query to see which fields are available  </p> Which Fields are we going to use to find information about agents? <p>agentSession  </p> <p>Click on the blue text of the name of the field you want to use You can now see the Arguments and Fields available  </p> Hover over the name of the fields you selected in the previous step at the top of the frame and the ADD QUERY button will appear, click it <p></p> <p>You now have a query template in the first pane of Altair     </p> Delete the \"has\" section and all of its fields <p></p> <p>In the Fields section of the query (agentSessions section):  </p> <p>Delete the lines for intervalStartTime(sort: asc) and aggregation as we are not using them in this query.</p> <p>In the Arguments section of the query (top section):</p> <p>Delete the lines for aggregation, aggregations, and aggregationInterval as we are not using aggregations in this query.  </p> Based on the requirements listed above in the story, what fields do you need to return in your query? <ul> <li>Agent name = agentName</li> <li>Team name = teamName</li> <li>Login time = startTime</li> <li>Current Status = channelInfo =&gt; currentState (note that this is not the same as the state field)</li> <li>Last Activity time = channelInfo =&gt; lastActivityTime</li> </ul> currentState and lastActivityTime have a special method of being addressed in the query <p></p><pre><code>channelInfo{\n    currentState\n    lastActivityTime\n}\n</code></pre> Update the channelInfo fields in the query.<p></p> Use the Time Widget in the Graph QL Workbench to update the Arguments section of the query selecting From: 1 day ago and To: Now.  Then copy the values into the query. <p></p> <p>Press the green Send Request button Scroll through the results in the middle pane of Altair  </p> <p>Note that there is a lot of extra information you will not need to satisfy the requirements. </p> <p>Add filters to the Arguments section of the query to only return agent data for agent which are currently active (logged in) and only return the status information for the telephony channel Inside the curly braces after filter add this compound filter  </p> <pre><code>    and:[\n    {isActive:{equals:true}}\n    {channelInfo:{channelType:{equals:\"telephony\"}}}\n    ]\n</code></pre> <p>Press the green Send Request button </p> <p>Note there are still fields you will not need to satisfy your requirements</p> <p>Comment out any fields you will not need by using ctrl + / in front of the field name (you can comment more than one line at a time by selecting multiple lines) Press the green Send Request button to see the results.</p> <p>Do not close this tab as you will be using it in an upcoming step</p>"},{"location":"lab2_adminActions/#use-api-to-log-out-agents","title":"Use API to log out agents","text":"<p>Navigate to the Agent Logout API documentation</p> <p>Log into the developer portal using your admin credentials  </p> <p>Login: admin login Password: password </p> <p>In the logoutReason field enter Admin Logout</p> <p>In the search API results in the the GraphQL Workbench, find your agent's information.</p> Do you have all of the data we need to to make the logout API call? <p>You will also need the agentID of the agent you want to log out.  </p> <p>Uncomment out agentId in the fields of the GQL query if they were previously commented out and rerun the request</p> <p>Enter your agent's agentId in the agentId field Click on the option to see the Request Body (JSON) Click on the RUN button</p> <p>You should receive a 202 response  </p> <p>Do not close this tab as you will be using it in an upcoming step  </p>"},{"location":"lab2_adminActions/#creating-the-web-component","title":"Creating the Web Component","text":"<p>Now that you have the basic data and API elements understood and tested, it is time to put them together in code to visualize the data and orchestrate our actions all while creating a good experience for the end user.</p>"},{"location":"lab2_adminActions/#create-a-new-web-component","title":"Create a new Web Component","text":"<p>Create a new file in the src directory named admin-actions.ts</p> <p>In the new file type (not paste) littemplate</p> <p>Select the Create LitElement Component With lit-html</p>"},{"location":"lab2_adminActions/#add-a-string-property-to-hold-your-access-token","title":"Add a string Property to hold your Access Token","text":"<p>@property() token?: string</p>"},{"location":"lab2_adminActions/#add-an-array-state-to-hold-the-data-you-will-return-in-the-query","title":"Add an array State to hold the data you will return in the query","text":"<p>@state() agentList = []</p>"},{"location":"lab2_adminActions/#create-an-async-method-to-call-the-search-api","title":"Create an Async method to call the search API","text":"<p>async getAgents(){}</p>"},{"location":"lab2_adminActions/#refactor-and-export-your-graph-ql-query","title":"Refactor and Export your Graph QL Query","text":"In your GraphQL Workbench browser tab, click on the \"suitcase\" icon on the left menu bar then click Refactor Query <p>Change the name of the query from refactored### to: activeAgents Compress the query (suitcase menu &gt; Compress) Copy as cURL (suitcase menu &gt; Copy as cURL)  </p> Show me the steps <p></p>"},{"location":"lab2_adminActions/#import-curl-into-postman","title":"Import cURL into Postman","text":"<p>Open Postman Click Import  </p> Paste the cURL from the GraphQL Workbench into the import text box <p></p>"},{"location":"lab2_adminActions/#update-headers-in-postman","title":"Update Headers in Postman","text":"<p>Uncheck all headers except: Content-Type and Accept Add an Authorization Header:  </p> <p>Key: Authorization Value: Bearer placeHolder</p>"},{"location":"lab2_adminActions/#format-the-request-body","title":"Format the request Body","text":"<p>Click on Body Click the Text dropdown and select JSON Click Beautify  </p>"},{"location":"lab2_adminActions/#turn-the-request-into-code","title":"Turn the request into code","text":"<p>Click the Code button   Select JavaScript - Fetch for the language Click the settings cog and ensure the Use async/await is toggled on Copy the code using the copy button.  </p> Show me <p></p>"},{"location":"lab2_adminActions/#add-the-code-to-the-getagents-method-and-make-these-changes","title":"Add the code to the getAgents method and make these changes","text":"<p>Between the curly braces of the getAgents method, press enter then paste the copied code from postman In the headers section of the method, find the Authorization header and change \"Bearer placeHolder\" to  <code>`Bearer ${this.token}`</code> In the raw section which holds the stringified JSON:</p> <p>Change the from variable value to represent a time 24 hours (86400000 ms) before the current time (Date.now()) using a string literal expression: <code>`${Date.now() - 86400000}`</code> </p> <p>Change the to variable value to represent the time now: <code>`${Date.now()}`</code> </p> <p>Set the type of requestOptions to be an object by adding this notation, after its name and before the equals sign: <code>: object</code> </p> <p>In the try section of the method:  </p> <p>Change result to equal: response.json() instead of response.text()  </p>"},{"location":"lab2_adminActions/#return-to-the-graphql-workbench-to-understand-how-to-use-the-returned-data","title":"Return to the GraphQL Workbench to understand how to use the returned data","text":"<p>In the center pane of Altair, copy the data returned from the query Open JSON Path Finder Paste the copied data into the left pane In the right pane, navigate until you find the array of agentSessions  </p> What is the JSON path which will return the array of agentSessions? <p>x.data.agentSession.agentSessions</p> In the agent-actions.ts file, set the value of agentList to this JSON path <p>Add this.agentList = result.data.agentSession.agentSessions; in the try section of the getAgents method, below the const result = await response.json(); line </p> <p>Back in JSON Path Finder, make the data mimic what you set agentList to in the previous step and only keeping the agentSessions array</p> <p>On line 4 double click next to the opening bracket of agentSessions to select the entire array. Copy the array (ctrl + c) Delete all the data (ctrl + a and delete) Paste the previously copied array (ctrl + v)</p> Show me <p></p>"},{"location":"lab2_adminActions/#update-the-html-template-in-the-render-method","title":"Update the html template in the render method","text":"<p>In the render() method add a few lines between the back ticks in of the <code>return html``</code> line Add a title header for the web component: <code>&lt;h1 class=\"title\"&gt;Admin Actions&lt;/h1&gt;</code> Add a button to call the getAgents method: <code>&lt;div&gt;&lt;button @click=${this.getAgents}&gt;Refresh Agent List&lt;/button&gt;&lt;/div&gt;</code> Create a table with headers for Agent Name, Team, Login Time, and Status  </p> <p>Add a <code>&lt;table&gt;</code> tag Inside the table tags add a table head tag <code>&lt;thead&gt;</code> Inside the table head tag add table headers for the table as listed above.  Example: <code>&lt;th&gt;Agent Name&lt;/th&gt;</code></p> Check your code <p></p>"},{"location":"lab2_adminActions/#create-the-table-body-using-the-data-from-the-agentlist-array","title":"Create the table body using the data from the agentList array","text":"<p>In this section you are going to use the map method which will preform an action for each object in an array.  Each iteration of the map method will produce an object from that index of the array which you will refer to as t and will represent the root of the JSON path.  You will be using JSON Path Finder to understand the JSON path addresses as you progress through the fields.  You will also be doing some math and other formatting to the returned values to produce a more user friendly table.</p>"},{"location":"lab2_adminActions/#use-the-map-method-to-render-the-html-of-the-table-body-below-the-thead-closing-tag","title":"Use the map method to render the html of the table body below the <code>&lt;/thead&gt;</code> closing tag","text":"<pre><code>    ${this.agentList?.map((t: any) =&gt; html`\n    &lt;tbody&gt;\n\n    &lt;/tbody&gt;\n    `)}\n</code></pre>"},{"location":"lab2_adminActions/#inside-the-tbody-tags-create-the-table-data-cells","title":"Inside the tbody tags create the table data cells","text":"<p>Using JSON Path Finder, Create the field for agentName  </p> <p><code>&lt;td&gt;${t.agentName}&lt;/td&gt;</code> </p> Create the field for Team <p><code>&lt;td&gt;${t.teamName}&lt;/td&gt;</code> </p> <p>Create the value of startTime in a human readable datetime stamp  </p> <p><code>&lt;td&gt;${new Date(t.startTime).toLocaleString()}&lt;/td&gt;</code> </p> Create the value of currentState <p><code>&lt;td&gt;${t.channelInfo[0].currentState}&lt;/td&gt;</code></p> <p>Create the duration of time in the current state  </p> <p><code>&lt;td&gt;${new Date(Date.now() - t.channelInfo[0].lastActivityTime).toISOString().slice(11, -5)}&lt;/td&gt;</code></p> Check your code <p></p> <p>Save the TS file  </p>"},{"location":"lab2_adminActions/#add-to-indexhtml-passing-the-bearer-token-as-a-property","title":"Add to index.html passing the Bearer token as a property","text":"Add the script tag in the header of index.html <p><code>&lt;script type=\"module\" src=\"/src/admin-actions.ts\"&gt;&lt;/script&gt;</code></p> Add the custom element tag to the html body of index.html <p><code>&lt;admin-actions token=\"Replace with the token value from the GraphQL Workbench\"&gt;&lt;/admin-actions&gt;</code></p>"},{"location":"lab2_adminActions/#start-the-development-server","title":"Start the Development server","text":"<p>In the terminal of VS Code run: yarn dev Launch the development server index page </p> <p>You should see your web component in the browser  </p>"},{"location":"lab2_adminActions/#log-into-the-agent-desktop-so-that-you-will-have-data-to-populate-the-web-component","title":"Log into the Agent Desktop (so that you will have data to populate the web component)","text":"<p>Launch the Agent Desktop</p> <p>Login: admin login Password: password Team: team </p> <p>Click the Refresh Agent List button  </p> <p>You should see the list of logged in agents populate  </p> <p>Keep this tab open for additional testing.  </p>"},{"location":"lab2_adminActions/#make-the-output-look-a-better-by-adding-this-css-to-the-static-styles","title":"Make the output look a better by adding this CSS to the static styles:","text":"<pre><code>            :host{\n            display: flex;\n            flex-direction: column;\n            border: solid 3px var(--md-primary-text-color);\n            padding: 2em;\n            color:var(--md-primary-text-color)\n            }\n            .title{\n            text-align: center\n            }\n            table{\n            display:table;\n            border-collapse:collapse;\n            border-spacing: 0;\n            margin-top: 15px;\n            }\n            tr, th, td{\n            border: solid 1px;\n            text-align: center;\n            }\n            .hidden{\n            display:none;\n            }\n</code></pre> <p>Save the file Click the Refresh Agent List button Observe the changes to your web component  </p>"},{"location":"lab2_adminActions/#convert-the-logout-agents-api-call-into-code","title":"Convert the Logout Agents API call into code","text":"<p>In the browser tab with the developer portal open to the agent logout API:  </p> <p>Click on Code Snippets Select Curl Click the Copy button in the upper right corner of the code   Open Postman and import the cURL Click the code button in Postman</p> <p>Make sure that you have selected Javascript - Fetch with async/await Copy the code  </p>"},{"location":"lab2_adminActions/#create-a-new-async-method-to-log-out-agents","title":"Create a new async method to log out agents","text":"<p>async logOutAgent(e: any){} Between the curly braces, press enter then paste the copied code from postman. Make the following edits to the method code:  </p> <p>Change the Authorization header to use the token property Set the type of requestOptions to be an object by adding this notation, after its name and before the equals sign: <code>: object</code> Change the agentId in the raw variable to use <code>e.target.value</code></p> Check your code <p></p>"},{"location":"lab2_adminActions/#add-a-button-to-log-out-the-agent-in-every-row-of-the-table","title":"Add a button to log out the agent in every row of the table","text":"<p>Add a header to the bottom of the <code>&lt;thead&gt;</code> section: <code>&lt;th&gt;Action&lt;/th&gt;</code> Add another column to the table data map at the bottom of the <code>&lt;tbody&gt;</code> section:  <code>&lt;td&gt;&lt;button value=${t.agentId} @click=\"${this.logOutAgent}\"&gt;Log Out&lt;/button&gt;&lt;/td&gt;</code></p> Check your code <p></p> <p>Save the file Click the Refresh Agent List button Observe the changes to your web component  </p>"},{"location":"lab2_adminActions/#adding-the-web-component-to-the-agent-desktop","title":"Adding the Web Component to the agent desktop","text":""},{"location":"lab2_adminActions/#download-the-desktop-layout","title":"Download the Desktop Layout","text":"<p>In Control Hub navigate to Contact Center =&gt; Desktop Layouts Locate the Desktop Layout named placeholder for layout name Click the name of the Desktop Layout to access the details  </p> <p>Note</p> <ul> <li>Desktop Layouts are assigned to agents based on the team they have logged in with.</li> <li>You can download the existing Desktop Layout JSON if you would like to see the configuration or make edits.</li> <li>You can download the default Desktop Layout if you want to start fresh or see what new options may be available on the agent desktop.</li> <li>If you do not upload a custom desktop layout, new features will automatically appear on the agent desktop for the assigned teams as they become available.</li> </ul> <p>Click the button to download the default desktop layout. Open the JSON file in Visual Studio Code  </p> <p>In the Explorer pane (left pane) of VS Code, click on the Outline to expand it.  </p> <p>You may choose to click on HELLO-WORLD at the top of the Explored pane to collapse the file list of your web components while you explore the Desktop Layout outline. Hover over OUTLINE to expose the Collapse All  button and click on it.  </p> <p>Note</p> <ul> <li>The JSON layout contains sections for agent, supervisor, and supervisorAgent</li> <li>The layout options will be based on the role the user is logging in with in addition to the team they are logging into.</li> </ul> <p>Expand agent &gt; area &gt; advancedHeader and click on advancedHeader to jump to that section </p> <p>Look at the first entry in the advancedHeader array</p> <ul> <li>Based on what you have been adding to the index.html file, what similarities do you notice?<ul> <li>comp - component and is the same as the html tag value you would put in the html body</li> <li>script - same as the script src value in the html header</li> <li>attributes - similar to properties, but limited to only containing strings, are the same (well similar) as passing a property in the opening component tag in the html  </li> </ul> </li> <li>Notice that the attributes (similar to properties) are being set with a variable<ul> <li>There is a data provider named STORE which will pass realtime updated to your web component so that it can update.</li> <li>STORE attribute documentation for reference</li> </ul> </li> </ul> <p>Code</p> <pre><code>    {\n      \"comp\": \"digital-outbound\",\n      \"script\": \"https://wc.imiengage.io/AIC/engage_aic.js\",\n      \"attributes\": {\n        \"darkmode\": \"$STORE.app.darkMode\",\n        \"accessToken\": \"$STORE.auth.accessToken\",\n        \"orgId\": \"$STORE.agent.orgId\",\n        \"dataCenter\": \"$STORE.app.datacenter\",\n        \"emailCount\": \"$STORE.agent.channels.emailCount\",\n        \"socialCount\": \"$STORE.agent.channels.socialCount\"\n      }\n    }\n</code></pre>"},{"location":"lab2_adminActions/#adding-your-widget-to-a-navigation-page","title":"Adding your widget to a Navigation Page","text":"<p>In the Desktop Layout Outline, Expand agent &gt; area &gt; navigation and click on navigation to jump to that section of the JSON.  </p> After the closing curly brace of the last item in the navigation array and before the closing square bracket of the navigation array: <p></p> <p>Add a comma and press enter Paste this JSON into the layout  </p> <pre><code>{\n        \"nav\": {\n            \"label\": \"Admin Actions\",\n            \"icon\": \"admin-regular\",\n            \"iconType\": \"momentumDesign\",\n            \"navigateTo\": \"aActions\",\n            \"align\": \"top\"\n        },\n        \"page\": {\n            \"id\": \"aActions\",\n\n            \"widgets\": {\n            \"comp1\": {\n                \"comp\": \"admin-actions\",\n                \"script\":\"http://localhost:4173/index.js\",\n                \"attributes\": {\n                \"token\": \"$STORE.auth.accessToken\"\n                }\n            }\n            },\n            \"layout\": {\n        \"areas\": [[\"comp1\"]],\n        \"size\": {\n            \"cols\": [1],\n            \"rows\": [1]\n        }\n        }\n        }\n        }\n</code></pre>"},{"location":"lab2_adminActions/#save-and-update-the-new-layout-json","title":"Save and update the new layout JSON","text":"<p>Save the file as yourTeamName.json  Locate your assigned Desktop Layout  Upload the new JSON by dragging the file into the import box or clicking Replace file and navigating to the file using the file explorer Click Save in the lower right corner</p>"},{"location":"lab2_adminActions/#testing","title":"Testing","text":""},{"location":"lab2_adminActions/#build-and-server-your-widget-code","title":"Build and server your widget code","text":"<p>In the terminal at the bottom of VS Code: Use press ctrl + c to shut down the development server Build the externally usable code by entering the command: yarn build Start the preview server with the build command in watch mode by entering the command: yarn game </p>"},{"location":"lab2_adminActions/#log-into-the-agent-desktop","title":"Log into the agent desktop","text":"<p>Log into the Agent Desktop if you are not already logged in.  </p> <p>Login: admin login Password: password Team: team </p>"},{"location":"lab2_adminActions/#testing-steps","title":"Testing steps","text":"<p>The Navigation pane should include the icon you defined in the agent desktop  Click on the icon to show the Admin Actions screen</p> <p>Does the tool render?  </p> <p>Click the Refresh Agent List button  </p> <p>Do you see a list of logged in users with all of the fields populated?  </p> <p>Click on the avatar (your initials) in the upper right corner of the screen to open the desktop settings  </p> <p>Toggle to dark mode  </p> <p>Does the tool render correctly in both light and dark mode?  </p> <p>Find a buddy next to you in the room and one of you log the other person out using the logout button.</p> <p>Did the agent get logged out?</p> <p>Refresh the list using the button to make sure.  </p>"},{"location":"lab2_adminActions/#stop-the-testing-server","title":"Stop the testing server","text":"<p>In the terminal of VS Code press ctrl + c  </p>"},{"location":"lab3_queueScroller/","title":"Lab 3 - Scrolling Queue Statistics","text":""},{"location":"lab3_queueScroller/#story","title":"Story","text":"<p>As a contact center director, I want my agents to have scrolling text on their agent desktop with call queue statistics for calls which they are eligible to receive, so they can see them without looking at another screen.</p> <p>Requirements</p> <ol> <li>Queues the agent is eligible to receive calls from:<ul> <li>Queues which include the agent's team</li> <li>Direct skilled queues where the agent's skills match</li> <li>Agent assigned queues where the agent is assigned</li> </ul> </li> <li>For all calls: <ul> <li>List the queue name</li> <li>List the number of calls</li> <li>Show the longest wait time in queue</li> </ul> </li> <li>Queue statistics should scroll on the agent desktop<ul> <li>Data should update automatically</li> </ul> </li> </ol>"},{"location":"lab3_queueScroller/#data-and-actions","title":"Data and Actions","text":""},{"location":"lab3_queueScroller/#list-all-queues-assigned-to-the-agent-by-the-team-they-are-logged-into","title":"List all queues assigned to the agent by the team they are logged into","text":"<p>Navigate to List references for a specific Team API </p> Get the team ID for your team from Control Hub &gt; Contact Center &gt; Teams <p> </p> <p>Fill in the required details Click to run the request Copy the cURL and import it into Postman</p>"},{"location":"lab3_queueScroller/#list-all-skilled-queues-from-which-the-agent-can-receive-calls","title":"List all skilled queues from which the agent can receive calls","text":"<p>Navigate to List skill based Contact Service Queue(s)by user ID </p> Get the userId for your user from Control Hub &gt; Contact Center &gt; Contact Center Users <p> </p> <p>Fill in the required details Click to run the request Copy the cURL and import it into Postman</p>"},{"location":"lab3_queueScroller/#list-all-queues-in-which-the-agent-is-directly-assigned","title":"List all queues in which the agent is directly assigned","text":"<p>Navigate to List agent based Contact Service Queue(s)by user ID Use the same userId as the previous request to fill in the required details Click to run the request Copy the cURL and import it into Postman</p> Did you notice anything interesting about the API calls and responses? <ul> <li>All three use the same method (GET)</li> <li>The returned JSON has nearly the same structure</li> <li>All three calls are using the same headers</li> <li>All three are using the same URL root</li> </ul> <p>Keep Postman open as we will be using the information in a future step</p>"},{"location":"lab3_queueScroller/#use-the-search-api-to-retrieve-the-number-of-contacts-and-oldest-contact-createdtime-for-the-queues-which-the-agent-is-assigned","title":"Use the Search API to retrieve the number of contacts and oldest contact createdTime for the queues which the agent is assigned","text":"<p>For this query you will be using aggregations and a compound filter to retrieve the queue statistics.  </p> <p>Open the Search API GraphQL Workbench </p> If your previous session is still validIf your previous session is no longer valid <p>Click the Add New button  </p> <p>Use the Authorization Tool (Tools &gt; Authorization)</p> <p>Login: admin login Password: password</p> Copy the authorization header into the environment variables <p></p> <p>Set the URL: https://api.wxcc-us1.cisco.com/search </p> <p>Open the Docs pane and add the query for task using the ADD QUERY button Remove the has section Remove the intervalInfo and pageInfo sections Remove all fields in the tasks section except lastQueue and aggregation After lastQueue add: {name} After aggregation add: {name value} In the Arguments section of the query, remove the lines for aggregation, aggregationInterval, and pagination Click the suitcase icon and select Prettify  </p>"},{"location":"lab3_queueScroller/#creating-the-aggregations","title":"Creating the aggregations","text":"<p>Abstract</p> <p>An Aggregation can return a count, sum, average, max, min, or cardinality of a field along with a name you provide.  They can also have their own set of filters which can be used to further refine the data into the information you require.  In their most basic form an aggregation is represented like: <code>{ field: \"string\", type: count, name: \"string\" }</code> inside an array. They can be further bifurcated by having other fields in the query.  In our case we are going to slice our aggregations based on the lastQueue where they were assigned.  </p> Create an aggregation to return the count of contact <p>{ field: \"id\", type: count, name: \"contacts\" }</p> <p>We are returning the count of the task IDs and naming is \"contacts\"</p> <p>Replace the aggregating template example in the query with your new aggregation leaving the square brackets. Then press enter twice to move the closing square bracket down to make room for the next aggregation.</p> Create an aggregation to return the min createdTime and name it oldestStart <p>{ field: \"createdTime\", type: min, name: \"oldestStart\" }</p> <p>We are returning the min or lowest Epoch time</p> <p>Add this aggregation directly below the one you just created. Prettify your query. </p> Check your Aggregations <p></p>"},{"location":"lab3_queueScroller/#creating-the-compound-filter","title":"Creating the compound filter","text":"<p>Abstract</p> <p>In the previous lab, you used an and filter group to exclude records and fields which did not match the filter criteria.  In this query you will be nesting an inclusive or filter group inside an excluding and filter group.</p> <p>Inside the curly braces of the filter, type: <code>and:[]</code>, then press enter between the square brackets  </p> How would you add a filter if you only want to return contacts which are active and in queue? <pre><code>{isActive:{equals:true}}\n{status:{equals:\"parked\"}}\n</code></pre> <p>After adding the previous filters inside the and group, on the next line type: <code>{or:[]}</code>, then press enter between the square brackets. Using the Queue IDs returned from the List references for a specific Team API query you have in Postman:  </p> <p>For each of the Queue IDs add a new filter inside the or square brackets with the Queue ID inside the quotes for equals: <code>{lastQueue:{id:{equals:\"\"}}}</code> </p> Check your filters <p></p>"},{"location":"lab3_queueScroller/#testing-the-query","title":"Testing the query","text":"<p>Place a call to your assigned inbound number:  </p> <p>You can mute the volume for the call as you will not actually be answering the call.  </p> <p>Use the time tool to set the from: 1 day ago and to: Now Press the Send Request button You can end the call once your query has returned the results  </p>"},{"location":"lab3_queueScroller/#optimizing-and-exporting-the-query","title":"Optimizing and exporting the query","text":"<p>Using the options in the suitcase menu</p> <p>Refactor the query Rename the query to queueStats Export the cURL and import it into Postman</p> <p>Do not close the browser tab</p> <p>In Postman:</p> <p>Uncheck all headers except: Content-Type and Accept Add an Authorization Header: Key: Authorization Value: Bearer placeHolder Change the body type to JSON and Beautify it  </p>"},{"location":"lab3_queueScroller/#creating-the-web-component","title":"Creating the Web Component","text":""},{"location":"lab3_queueScroller/#create-a-new-web-component","title":"Create a new Web Component","text":"<p>Create a new file in the src directory named queue-scroll.ts</p> <p>In the new file, type (not paste) littemplate</p> <p>Select the Create LitElement Component With lit-html</p>"},{"location":"lab3_queueScroller/#create-properties-for-the-required-variables","title":"Create Properties for the required variables","text":"<p>@property() token?: string @property() orgId?: string @property() teamId?: string @property() agentId?: string </p>"},{"location":"lab3_queueScroller/#create-states-for-the-required-data-elements","title":"Create States for the required data elements","text":"<p>@state() queueStats = [] @state() queueFilter: object[] = [] </p>"},{"location":"lab3_queueScroller/#create-a-new-async-method-to-query-the-search-api","title":"Create a new async method to query the Search API","text":"<p>async getStats(){} In Postman, use the code feature to generate a JavaScript - Fetch using the async/await options and press copy Between the curly braces of the getAgents method, press enter then paste the copied code from postman In the headers section of the method, find the Authorization header and change \"Bearer placeHolder\" to  <code>`Bearer ${this.token}`</code> In the raw section which holds the stringified JSON:</p> <p>Change the from variable value to represent a time 24 hours (86400000 ms) before the current time (Date.now()) using a string literal expression: <code>`${Date.now() - 86400000}`</code> </p> <p>Change the to variable value to represent the time now: <code>`${Date.now()}`</code> </p> <p>Set the type of requestOptions to be an object by adding this notation, after its name and before the equals sign: <code>: object</code> </p> <p>In the try section of the method:  </p> <p>Change result to equal: response.json() instead of response.text()  </p>"},{"location":"lab3_queueScroller/#return-to-the-graphql-workbench-to-understand-how-to-use-the-returned-data","title":"Return to the GraphQL Workbench to understand how to use the returned data","text":"<p>In the center pane of Altair, copy the data returned from the query Open JSON Path Finder Paste the copied data into the left pane In the right pane, navigate until you find the array of queues and their aggregations   </p> What is the JSON path which will return the array of queues and their aggregations? <p>x.data.task.tasks</p> What is the JSON path for the value of the queue name in the first array item? <p>x.data.task.tasks[0].lastQueue.name</p> What is the JSON path for the value of the oldestStart aggregation in the first array item? <p>x.data.task.tasks[0].aggregation[0].value</p> What is the JSON path for the value of the number of contacts in the first array item? <p>x.data.task.tasks[0].aggregation[1].value</p>"},{"location":"lab3_queueScroller/#use-map-to-create-an-unordered-list-item-for-each-item-returned-in-the-query","title":"Use map to create an unordered list item for each item returned in the query","text":"<p>Abstract</p> <p>In this line of code you are going set the value of the state queueStats using map on the JSON results from the Graph QL query. For each item in the array of queue information, you are going to create a list item of an unordered list using an html template.  Each list item will include; the queue name, number of contacts, and how long the contact has been in the queue. </p> <p>In the try section of the getStats method, below the line <code>const result = await response.json();</code>:  </p> Insert this updated line of code using the information from JSON path Finder: this.queueStats = await result.(JSON path to the array items).map((item: any) =&gt;{}) <p>this.queueStats = await result.data.task.tasks.map((item: any) =&gt; {})</p> <p>In the curly bracket of the arrow function use insert this html template then update the template to use the array values:</p> <p><code>return html`&lt;li&gt; | Queue: ${&lt;replace with queue name&gt;} Contacts: ${&lt;replace with the count of contacts&gt;} Wait: ${new Date(Date.now() - &lt;replace with the oldestSrart time&gt;).toISOString().slice(11, -5)} |&lt;/li&gt;`</code></p> Answer <p><code>return html`&lt;li&gt; | Queue: ${item.lastQueue.name} Contacts: ${item.aggregation[1].value} Wait: ${new Date(Date.now() - item.aggregation[0].value).toISOString().slice(11, -5)} |&lt;/li&gt;`</code></p>"},{"location":"lab3_queueScroller/#update-the-render-method","title":"Update the render method","text":"<p>Add this code, which includes an unordered list and a temporary testing button, into the html template of the render method:  </p> <pre><code>        &lt;button @click=${this.getStats}&gt;test&lt;/button&gt;     \n        &lt;div class=\"marquee-container\"&gt;\n            &lt;ul class=\"marquee\"&gt;\n                ${this.queueStats}\n                ${this.queueStats}\n            &lt;/ul&gt;\n        &lt;/div&gt;\n</code></pre> <p>Save the file   </p>"},{"location":"lab3_queueScroller/#add-to-indexhtml","title":"Add to index.html","text":"<p>In the index.html:  </p> Add the script tag for this web component into the header <p><code>&lt;script type=\"module\" src=\"/src/queue-scroll.ts\"&gt;&lt;/script&gt;</code></p> Add the web component's html tag and pass the property values for token, orgId, teamId, and agentId <p>Fill in the empty values: <code>&lt;queue-scroll token=\"\" orgId=\"\" teamId=\"\"  agentId=\"\"&gt;&lt;/queue-scroll&gt;</code></p> <p>Save the file  </p>"},{"location":"lab3_queueScroller/#start-the-development-server-and-test","title":"Start the Development server and test","text":"<p>In the terminal of VS Code run: yarn dev Launch the development server index page </p> <p>You should see your web component in the browser  </p> <p>Place a call to your inbound number  Press the test button on the widget after you hear hold music  </p> <p>You should see two identical entries appear with the Queue Name, Number of Contacts, and longest wait time. There is a reason which there are 2 identical entries which will be discussed later in the lab.  </p> <p>Press the test button again.  </p> <p>The Longest Wait time should update.  </p> <p>Disconnect the call. Press the test button again.  </p> <p>The queue information should disappear.  </p>"},{"location":"lab3_queueScroller/#create-a-new-async-method-to-aggregate-a-list-of-queues-for-the-agent-signed-in-and-update-the-query-filter-with-those-queue-values","title":"Create a new async method to aggregate a list of queues for the agent signed in and update the query filter with those queue values","text":"<p>Abstract</p> <p>There are three APIs you will need to call in order to retrieve a full list of queues from which the agent may receive calls.  However, this does not mean that you will need three different methods added to your web component, and with the URL paths and returned JSON being very similar, you have the ability to reuse code.</p> <p>The URLs are formatted with the root: <code>https://api.wxcc-us1.cisco.com/organization/{orgId}</code> And the paths: <code>/team/{teamId}/incoming-references</code> <code>/v2/contact-service-queue/by-user-id/{agentId}/skill-based-queues</code> <code>/v2/contact-service-queue/by-user-id/{agentId}/agent-based-queues</code> </p> <p>async getQueues(){} In Postman, copy the code (Javascript - Fetch with async/await) for the List references for a specific Team API call  Between the curly braces of the getAgents method, press enter then paste the copied code from postman  </p> Update the Authorization header to use the property token <p> <code>`Bearer ${this.token}`</code> </p> <p>Bellow the headers, add a new constant which holds an array of the URL paths:  </p> <p><code>const paths = [`/v2/contact-service-queue/by-user-id/${this.agentId}/agent-based-queues`, `/v2/contact-service-queue/by-user-id/${this.agentId}/skill-based-queues`, `/team/${this.teamId}/incoming-references`]</code> </p> <p>On the next line, make sure that the state queueFilter is an empty array before you add values by setting like this: this.queueFilter = [] Set the type of requestOptions to be an object by adding this notation, after its name and before the equals sign: <code>: object</code> </p> <p>Abstract</p> <p>In the next steps you will use a forEach method iterate through the paths array, making an API call \"for each\" path in the array.  During each iteration you will use another forEach method to iterate through the returned data, then add a formatted object to the queueFilter array.  After creating the queueFilter, you will call the getStats() method to populate the queue information.</p> <p>Wrap the try/catch section in a forEach method:  </p> <p>On the line above the try, insert: <code>paths.forEach(async (path, i) =&gt; {</code> Below the closing curly brace of the catch. insert: <code>})</code> </p> <p>Change the URL in the fetch command to <code>`https://api.wxcc-us1.cisco.com/organization/${this.orgId}${path}`</code> Change result to equal: response.json() instead of response.text() Add the forEach to iterate through the returned data and push the formatted object into the queueFilter array:  </p> <p>result.data.forEach((q: any) =&gt; this.queueFilter.push({ lastQueue: { id: { equals: q.id } } })) </p> <p>After the closing curly brace of the catch and before the closing <code>})</code>, add an if statement to check if the forEach method has completed so that you can call the getStats method and populate the UI:  </p> <p>if (i &gt;= paths.length - 1) {this.getStats()}</p>"},{"location":"lab3_queueScroller/#update-the-get-stats-method-to-use-the-new-filter","title":"Update the get Stats method to use the new filter","text":"<p>In the getStats method, find the or filter group in the query variables:  </p> <p>Replace the square braces and JSON contained in the square braces with: this.queueFilter</p> Show me <p></p>"},{"location":"lab3_queueScroller/#update-the-testing-button-in-the-render-method","title":"Update the testing button in the render method","text":"<p>In the html template of the render method:  </p> <p>On the test button, change the @click from this.getStats to this.getQueues </p>"},{"location":"lab3_queueScroller/#testing","title":"Testing","text":"<p>Call your assigned DN to place a call in the queue dn Once the call is in queue, press the testing button  </p> <p>You should see two identical entries appear with the Queue Name, Number of Contacts, and longest wait time.  </p> <p>Disconnect the call.  </p>"},{"location":"lab3_queueScroller/#add-css-styling","title":"Add CSS Styling","text":"<p>Replace the static CSS with this CSS  </p> <pre><code>            :host {\n            display: flex;\n            }\n            .marquee-container {\n            width: 30vw;\n            height: 50px; /* Set a fixed height for the container */\n            overflow: hidden; \n            border:solid;\n            border-radius:25px;\n            }\n\n            .marquee {\n            list-style: none; /* Remove default list styles */\n            display:flex;\n            padding: 0;\n            margin: 0;\n            height:100%;\n            width:max-content;\n            animation: scroll linear infinite;\n            animation-duration: 10s;\n            align-items:center;\n            }\n            .marquee li {\n            display:flex;\n            align-self:center;\n            align-items:center;\n            justify-content:center;\n            flex-shrink:0;\n            font-size:2rem;\n            white-space:nowrap;\n            padding: 0 1rem 0 1rem;\n            }\n            .marquee:hover{\n            animation-play-state: paused;\n\n            }\n\n            @keyframes scroll {\n            0% {\n                transform: translateX(0); /* Start position */\n            }\n            100% {\n                transform: translateX(-50%); /* End position (fully scrolled) */\n            }\n            }\n</code></pre> <p>Save the file</p>"},{"location":"lab3_queueScroller/#testing_1","title":"Testing","text":"<p>Call your assigned DN to place a call in the queue dn Once the call is in queue, press the testing button  </p> <p>You should see the queue stats scrolling in your web component.</p> <p>Hover over the scrolling queue information   </p> <p>The scrolling should stop. Note that the time value is not incrementing. </p> <p>Disconnect the call</p>"},{"location":"lab3_queueScroller/#add-auto-load-and-refresh-functionality","title":"Add auto load and refresh functionality","text":"<p>Abstract</p> <ul> <li>Instead of updating the widget data only when you push a button, you can execute your code automatically once the web component is loaded using the connectedCallback lifecycle.  </li> <li>You can also employ the setInterval method to run parts of your code on a set interval to refresh your data.  </li> <li>Since the queues the agent is assigned are not likely to change often, you only need to execute getQueues when the agent logs in.</li> <li>If you are setting up event listeners or timers via connectedCallback, it is a best practice to remove them from memory when you unload the web component using the disconnectedCallback lifecycle.  In order to clear the setInterval, you will create a state so that you can reference it with later.  </li> </ul> <p>Add a new state @state() _timerInterval?: any  Add the connectedCallback and disconnectedCallback methods  </p> <pre><code>    connectedCallback() {\n        super.connectedCallback()\n        this.getQueues()\n        this._timerInterval = setInterval(() =&gt; this.getStats(), 30000);\n    }\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        clearInterval(this._timerInterval);\n    }\n</code></pre> <p>Remove the testing button from the html template of the render method.  Save the file.  </p>"},{"location":"lab3_queueScroller/#testing_2","title":"Testing","text":"<p>Call your assigned DN to place a call in the queue dn Once the call is in queue you should see the queue stats scrolling in your web component.  </p> <p>You should see the wait time increment by 30 seconds as long as you are still in the queue.  </p> <p>Disconnect the call.  </p> <p>Note that after disconnecting the call, the data still will not update until the 30 second timer hits.  </p>"},{"location":"lab3_queueScroller/#fine-tuning-the-experience","title":"Fine tuning the experience","text":"<p>Abstract</p> <p>You may have noticed that the scroll speed and the time in queue fields are static, meaning that it will take 10 seconds for the entire list of queue stats to scroll by regardless of the number of queues you are displaying and the longest queue time only updates when the data gets updated.  In this step, you are going to address both shortcomings with just a few lanes of code.  </p> <p>Create a new state to hold the data returned from the search API @state() queueData?: any Create a new state to hold the reference for a map update interval: @state() mapUpdate?: any In the getStats method after the <code>const result = await response.json();</code> line, add: <code>this.queueData = await result.data.task.tasks</code> Remove the line which maps the returned data in the list items Create a new method named: updateTemplate(){} In the curly braces of updateTemplate, paste this code: <code>this.queueStats = this.queueData.map((item: any) =&gt; { return html`&lt;li&gt; | Queue: ${item.lastQueue.name} Contacts: ${item.aggregation[1].value} Wait: ${new Date(Date.now() - item.aggregation[0].value).toISOString().slice(11, -5)} |&lt;/li&gt;` })</code> In the connectedCallback method add: this.mapUpdate = setInterval(() =&gt; this.updateTemplate(), 1000); In the disconnectedCallback method add: clearInterval(this.mapUpdate); In the ul opening tag of the render method, after <code>class=\"marquee\"</code>, add: style=\"animation-duration: ${this.queueStats.length * 10}s\" Save the file.  </p>"},{"location":"lab3_queueScroller/#testing_3","title":"Testing","text":"<p>Call your assigned DN to place a call in the queue dn Once the call is in queue you should see the queue stats scrolling in your web component.  </p> <p>You should see the wait times increment by every second.  </p> <p>Disconnect the call.</p> Notice that the call time will continue to increment even though the call is no longer in the queue.  Why? <p>The data is only updating every 30 seconds, but the UI is updating every second.</p>"},{"location":"lab3_queueScroller/#add-to-desktop-layout","title":"Add to Desktop Layout","text":"In the agent section of your desktop layout JSON file, locate the advancedHeader area. <p>Add this JSON above the entry for the digital-outbound component</p> <pre><code>{\n    \"comp\": \"queue-scroll\",\n    \"properties\": {\n        \"orgId\": \"$STORE.agent.orgId\",\n        \"token\": \"$STORE.auth.accessToken\",\n        \"teamId\": \"$STORE.agent.teamId\",\n        \"agentId\": \"$STORE.agent.agentId\"\n    },\n    \"script\": \"http://localhost:4173/index.js\"\n},\n</code></pre> <p>Save the JSON file as yourTeamName.json  Upload the JSON file  </p>"},{"location":"lab3_queueScroller/#testing_4","title":"Testing","text":"<p>In the terminal of VS Code, press ctrl + c to terminate the development server In the terminal of VS Code run: yarn game Log into the Agent Desktop</p> <p>Login: admin login Password: password Team: team </p> <p>Call your assigned DN to place a call in the queue dn </p> <p>Run the tests you think will test the functionality.</p>"},{"location":"oauth/","title":"oauth","text":""},{"location":"oops/","title":"Oops","text":"<p>Make sure that you copy the good elements into the form before updating so that they do not get cleared out when you click update</p> Recovery login Login: Password: WxC number: Inbound Channel Phone Number: Queue Name: layoutName: Team Name: POD: Update Lab Guide <p>Login: Provided by proctor</p> <p>Password: Provided by proctor</p> <p>Assigned WxC number: Provided by proctor</p> <p>Assigned Inbound Channel Number: Provided by proctor</p> <p>Assigned Queue Name 1: Provided by proctor</p> <p>Layout Name: Provided by proctor</p> <p>Assigned Team name 1: Provided by proctor</p> <p>Assigned POD: Provided by proctor</p>"},{"location":"overview/","title":"Overview","text":""},{"location":"overview/#overview","title":"Overview","text":""},{"location":"overview/#learning-objectives","title":"Learning Objectives","text":"<p>This lab will give you an introduction to building Web Components (Desktop Widgets) to extend the functionality of the agent desktop as well as using the new Webex Contact Center SDK to integrate the contact center into a line of business tool.</p>"},{"location":"overview/#disclaimer","title":"Disclaimer","text":"<p>Although the lab design and configuration examples could be used as a reference, for design related questions please contact your representative at Cisco, or a Cisco partner.</p>"},{"location":"overview/#tools-and-other-lab-requirements","title":"Tools and Other Lab Requirements","text":"<p>In this lab we will be using:</p> <p>Tools</p> <p>Yarn Vite + Lit VS Code Extensions GraphQL Workbench   JSON Path Finder  </p> <p>Software Requirements (preinstalled in lab)</p> <p>Node JS Visual Studio Code Git Postman</p>"},{"location":"overview/#lab-access","title":"Lab Access","text":"<p>In this lab we will be using Webex for making calls into the Contact Center and for viewing demos which will be shared by the instructor.  We will be using the same account for Admin and Agent activities in the Contact Center.  Your guide will reflect your specific environment variables, including login information, Channels, Queues, Teams, and assigned numbers in the steps of the actual lab as you progress.</p> <p>Login: Provided by proctor</p> <p>Password: Provided by proctor</p> <p>Webex Phone Number: Provided by proctor</p> <p>Assigned Inbound Channel Number: Provided by proctor</p> <p>Assigned Queue Name: Provided by proctor</p> <p>Assigned Team name: Provided by proctor</p> <p>Assigned Desktop Layout Name: Provided by proctor</p>"},{"location":"overview/#getting-started","title":"Getting Started","text":"<p>Log into Webex on your PC:</p> <p>Username: Provided by proctor Password: Provided by proctor </p> <p>Log into Webex Control Hub in Chrome</p> <p>Login: Provided by proctor</p> <p>Password: Provided by proctor</p>"},{"location":"overview/#testing-your-lab-setup","title":"Testing your lab setup","text":"<ol> <li>Launch the Agent Desktop and log in selecting the Desktop option for your Voice connection.</li> <li>From the Webex App, dial Provided by proctor<ol> <li>The call will be place in your queue without hearing a greeting message.</li> <li>You will hear the hold music until the call is answered</li> </ol> </li> <li>In the agent desktop, set your status to Available and answer the call.<ol> <li>Confirm that you can hear audio being passed in both directions.</li> <li>Disconnect the call</li> <li>Select a Wrap-up Code</li> <li>Set your status to Meeting</li> </ol> </li> <li>In the agent desktop, click on the dial pad. <ol> <li>Enter your Webex Phone Number: Provided by proctor in the text box 'Enter number to dial'</li> <li>Click on dial icon at the bottom of the dial pad pop up  </li> <li>Answer the call on your agent desktop  </li> <li>After answering, you will receive a call to your webex app. answer it </li> <li>Ensure there are no errors  </li> <li>Disconnect the call  </li> <li>Select a Wrap-up Code</li> <li>Set your status to Meeting</li> </ol> </li> </ol>"},{"location":"topologies/","title":"Lab topologies","text":""},{"location":"topologies/#lab-topologies","title":"Lab topologies","text":""},{"location":"welcome/","title":"Let's Set the Stage","text":""},{"location":"welcome/#welcome","title":"Welcome !","text":""},{"location":"howToUse/admonition/","title":"Admonition","text":"<p>In addition to the  stock admonitions which are available out of the box we have added some additional branded admonitions which were created by Bobby McGonigle. </p> <p>Blank</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Blank!')\n</code></pre> <p>Vidcast</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Vidcast!')\n</code></pre> <p>Download</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Download!')\n</code></pre> <p>Cedeploy</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Ce-Deploy!')\n</code></pre> <p>Webex</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Webex!')\n</code></pre> <p>Gif</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('How should I pronounce Gif?')\n</code></pre> <p>Important</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Important!')\n</code></pre> <p>Challenge</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Challenge!')\n</code></pre> <p>Tool</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Tool!')\n</code></pre> <p>Curious</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Curious!')\n</code></pre>"},{"location":"howToUse/customFeatures/","title":"customFeatures","text":""},{"location":"howToUse/customFeatures/#adding-a-copy-button-without-a-code-block","title":"Adding a Copy Button Without a Code Block","text":"<p><code>This will copy the following text: &lt;copy&gt;Text to copy&lt;/copy&gt;</code> </p> <p>This will copy the following text: Text to copy</p>"},{"location":"howToUse/customFeatures/#adding-user-specific-variables-into-your-lab-guide","title":"Adding user specific variables into your lab guide","text":"<p>There may be times in which you want to embed some attendee specific information into the instructions of your lab guide, like credentials or phone numbers, which will be used on multiple pages of your lab guide.  You can gather the information via a form or you can pass a pre-encoded JSON string as a URL parameter to populate the variable values into the browser's session storage.  Then you can use a simple HTML tag with a special class name to update the values in the lab guide.  This feature can be combined with the copy button method above.</p>"},{"location":"howToUse/customFeatures/#form-method","title":"Form Method","text":"Show me the code <pre><code>&lt;form id=\"info\"&gt;\n\n\n&lt;label for=\"Admin\"&gt;Admin Login:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Admin\" name=\"Admin\"&gt;&lt;br&gt;\n\n&lt;label for=\"PW\"&gt;Admin Password:&lt;/label&gt;\n&lt;input type=\"text\" id=\"PW\" name=\"PW\"&gt;&lt;br&gt;\n\n&lt;label for=\"EP\"&gt;Inbound Channel Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"EP\" name=\"EP\"&gt;&lt;br&gt;\n\n&lt;label for=\"DN\"&gt;Inbound Channel Phone Number:&lt;/label&gt;\n&lt;input type=\"text\" id=\"DN\" name=\"DN\"&gt;&lt;br&gt;\n\n&lt;label for=\"Queue\"&gt;Queue 1 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Queue\" name=\"Queue\"&gt;&lt;br&gt;\n\n&lt;label for=\"Queue2\"&gt;Queue 2 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Queue2\" name=\"Queue2\"&gt;&lt;br&gt;\n\n&lt;label for=\"Team\"&gt;Team 1 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Team\" name=\"Team\"&gt;&lt;br&gt;\n\n&lt;label for=\"Team2\"&gt;Team 2 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Team2\" name=\"Team2\"&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;button onclick=\"setValues()\"&gt;Update Lab Guide&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> Example Input Form Admin Login: Admin Password: Inbound Channel Name: Inbound Channel Phone Number: Queue 1 Name: Queue 2 Name: Team 1 Name: Team 2 Name: Update Lab Guide <p>Login: Provided by proctor</p> <p>Password: Provided by proctor</p> <p>Assigned Inbound Channel Name: Provided by proctor</p> <p>Assigned Inbound Channel Number: Provided by proctor</p> <p>Assigned Queue Name 1: Provided by proctor</p> <p>Assigned Queue Name 2: Provided by proctor</p> <p>Assigned Team name 1: Provided by proctor</p> <p>Assigned Team name 2: Provided by proctor</p>"},{"location":"howToUse/customFeatures/#url-method","title":"URL Method","text":"<p>If you have a lot of attendee variables in your lab, you may choose to precompile and encode them so that you can simply provide a URL link which will load all of their required information.</p> <p>To see this in action, add this string at the end of the URL for any page on this site: ?eyJBZG1pbiI6ImFkbWluQHh5ei5iaXoiLCJQVyI6InNVcGVyU2VjcmV0MTIzISIsIkVQIjoiRVAxIiwiRE4iOiIrMTkxMDU1NTEyMTUyIiwiUXVldWUiOiJRdWV1ZTEiLCJRdWV1ZTIiOiJRdWV1ZTIiLCJUZWFtIjoiVGVhbTEiLCJUZWFtMiI6IlRlYW0yIn0=</p>"},{"location":"howToUse/initialSetup/","title":"Initial Setup","text":""},{"location":"howToUse/initialSetup/#initial-setup","title":"Initial Setup","text":"<p>This lab guide template uses MKDocs to take your markdown documentation and transform it into an interactive web based lab guide.  You will need to install some software on your PC or Mac in order to take full advantage of the tool which will allow you to view your changes as you save them and ensure that your formatting is exactly how you want it.</p>"},{"location":"howToUse/initialSetup/#prerequisite-software-to-install","title":"Prerequisite Software to Install","text":"<ol> <li>Python</li> <li>Visual Studio Code</li> <li>Git</li> </ol>"},{"location":"howToUse/initialSetup/#setting-up-your-lab-guide-on-your-computer","title":"Setting up your lab guide on your computer","text":""},{"location":"howToUse/initialSetup/#clone-your-repository-with-git","title":"Clone your repository with git","text":"<p>Open Visual Studio Code</p> <p>Click the Source Control button in the left menu </p> <p>Click Clone Repository</p> <p>Enter the repository source:  https://github.com/WebexCC-SA/LAB-3354.git</p> <p>Select or create a new folder to clone the repository into.</p>"},{"location":"howToUse/initialSetup/#build-the-environment","title":"Build the environment","text":"<p>When prompted to open the cloned repository, select open.</p> <p>Drag open the terminal at the bottom of the Visual Studio Code window</p> Show Me <p></p> If you are on a PCIf you are on a Mac <p>In your terminal enter the following commands:</p> <p>python -m venv venv</p> <p>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</p> <p>venv\\Scripts\\activate.ps1</p> <p>pip install -r requirements.txt</p> <p>mkdocs serve</p> <p>Open a browser to http://127.0.0.1:8000 </p> <p>In your terminal enter the following commands:</p> <p>python -m venv venv</p> <p>source venv/bin/activate</p> <p>pip install -r requirements.txt</p> <p>mkdocs serve</p> <p>Open a browser to http://127.0.0.1:8000</p>"},{"location":"howToUse/postInitial/","title":"Using the tool after the initial setup","text":""},{"location":"howToUse/postInitial/#using-the-tool-after-the-initial-setup","title":"Using the tool after the initial setup","text":"<p>After the initial setup you will only need to take the following steps:</p> <p>Open Visual Studio Code</p> <p>Click the Source Control button in the left menu </p> <p>Click Open Folder and navigate to the folder where you cloned the repository</p> If you are on a PCIf you are on a Mac <p>In your terminal enter the following commands:</p> <p>venv\\Scripts\\activate.ps1</p> <p>mkdocs serve</p> <p>Open a browser to http://127.0.0.1:8000</p> <p>In your terminal enter the following commands:</p> <p>source venv/bin/activate</p> <p>mkdocs serve</p> <p>Open a browser to http://127.0.0.1:8000</p>"},{"location":"howToUse/references/","title":"References","text":""},{"location":"howToUse/references/#mk-docs-feature-reference","title":"MK Docs Feature Reference:","text":"<p>https://squidfunk.github.io/mkdocs-material/reference/ </p>"},{"location":"howToUse/references/#markdown-cheat-sheets","title":"Markdown Cheat Sheets:","text":"<p>https://www.markdownguide.org/cheat-sheet/ </p> <p>https://github.com/lifeparticle/Markdown-Cheatsheet </p>"},{"location":"howToUse/syncChanges/","title":"Publishing Your Changes","text":""},{"location":"howToUse/syncChanges/#publishing-your-changes","title":"Publishing Your Changes","text":"<p>As you progress with the creation of your lab guide, you should sync your changes periodically to GitHub.  </p>"},{"location":"howToUse/syncChanges/#syncing-your-changes-to-github","title":"Syncing your changes to GitHub","text":"<p>Make sure that you have saved all of the files you want to sync up to the repository</p> <p>Click the Source Control button in the left menu </p> <p>Click the plus sign next to each file you want to sync as you hover over the file names or alternatively, click the plus sign next to changes</p> <p>Enter a note about the changes you are making in the message text box</p> <p>Click the down chevron  on the commit button to reveal more options</p> <p>Select Commit &amp; Sync </p>"},{"location":"howToUse/syncChanges/#after-you-sync-your-changes-it-will-take-a-few-minutes-for-github-actions-to-build-the-website-so-that-you-can-view-all-of-the-changes-you-made","title":"After you Sync your changes, it will take a few minutes for GitHub Actions to build the website so that you can view all of the changes you made.","text":""}]}